import QtQuick 2.12
import QtQuick.Controls 2.12
import tech.strata.common 1.0
import QtQml 2.12


/******************************************************************
  * File auto-generated by PlatformInterfaceGenerator on 2021-07-07 12:08:45.541 UTC-07:00
******************************************************************/

PlatformInterfaceBase {
    id: platformInterface
    apiVersion: 2

    property alias notifications: notifications
    property alias commands: commands

    /******************************************************************
      * NOTIFICATIONS
    ******************************************************************/

    QtObject {
        id: notifications

        // @notification: get_data
        // @property accel: int
        // @property pos: int
        // @property time: double
        // @property turns: int
        // @property vel: int
        property QtObject get_data: QtObject {
            property real pos: 0
            property real vel: 0
            property int accel: 0
            property int turns: 0
            property real auto_zero_offset: 0

            signal notificationFinished()
        }

        // @notification: get_errors
        // @property batt_alarm: int
        // @property low_bat: int
        // @property no_power: int
        // @property over_temp: int
        // @property overflow: int
        // @property overspeed: int
        // @property sensor_error: int
        property QtObject get_errors: QtObject {
            property int overspeed: 0
            property int sensor_error: 0
            property int overflow: 0
            property int over_temp: 0
            property int low_bat: 0
            property int no_power: 0
            property int batt_alarm: 0

            signal notificationFinished()
        }

        // @notification: get_temperature
        // @property temperature: int
        property QtObject get_temperature: QtObject {
            property int temperature: 0

            signal notificationFinished()
        }

        property QtObject get_alarmbattv: QtObject {
            property int alarm_threshold: 0

            signal notificationFinished()
        }

        property QtObject get_lowbattv: QtObject {
            property double lowbatt_threshold: 0

            signal notificationFinished()
        }

        property QtObject get_maxtemp: QtObject {
            property int maxtemp_threshold: 0

            signal notificationFinished()
        }

        property QtObject get_firmware_version: QtObject {
            property int version: 0

            signal notificationFinished()
        }

        property QtObject get_battv: QtObject {
            property double battv: 0.0

            signal notificationFinished()
        }

        // @notification: status_telemetry
        // @property ibat: double
        // @property vbat: double
        // @property vcc: double
        property QtObject status_telemetry: QtObject {
            property double ibat: 2.67
            property double vbat: 0.0
            property double vcc: 0.0

            signal notificationFinished()
        }

        // @notification: reset_position
        // @property position: int
        property QtObject reset_position: QtObject {
            property int position: 0

            signal notificationFinished()
        }

        // @notification: reset_turns
        // @property turns: int
        property QtObject reset_turns: QtObject {
            property int turns: 0

            signal notificationFinished()
        }

        property QtObject vcc_en: QtObject {
            property bool status:true

            signal notificationFinished()
        }

        property QtObject dummy_data: QtObject {
            property bool status:true

            signal notificationFinished()
        }

        property QtObject bat_en: QtObject {
            property bool status:true

            signal notificationFinished()
        }


        // @notification: reset_errors
        // @property batt_alarm: int
        // @property low_bat: int
        // @property no_power: int
        // @property over_temp: int
        // @property overflow: int
        // @property overspeed: int
        // @property sensor_error: int
        property QtObject reset_errors: QtObject {
            property int batt_alarm: 0
            property int low_bat: 0
            property int no_power: 0
            property int over_temp: 0
            property int overflow: 0
            property int overspeed: 0
            property int sensor_error: 0

            signal notificationFinished()
        }

        // @notification: set_low_batt
        // @property battv_threshold: double
        property QtObject set_low_batt: QtObject {
            property double battv_threshold: 0.0

            signal notificationFinished()
        }

        // @notification: set_over_temp
        // @property temp_threshold: int
        property QtObject set_over_temp: QtObject {
            property int temp_threshold: 0

            signal notificationFinished()
        }


        // @notification: set_battv
        // @property battv: double
        property QtObject set_battv: QtObject {
            property double battv: 0.0

            signal notificationFinished()
        }

    }

    /******************************************************************
      * COMMANDS
    ******************************************************************/

    QtObject {
        id: commands
        // @command get_data
        property var get_data: ({
                                    "cmd": "get_data",
                                    update: function () {
                                        this.send(this)
                                    },
                                    send: function () { platformInterface.send(this) }
                                })

        // @command bat_en
        // @property enable: string
        property var bat_en: ({
                                  "cmd": "bat_en",
                                  "payload": {
                                      "enable": ""
                                  },
                                  update: function (enable) {
                                      this.set(enable)
                                      this.send(this)
                                  },
                                  set: function (enable) {
                                      this.payload.enable = enable
                                  },
                                  send: function () { platformInterface.send(this) }
                              })

        // @command bat_en
        // @property enable: string
        property var dummy_data: ({
                                      "cmd": "dummy_data",
                                      "payload": {
                                          "dummy_data": ""
                                      },
                                      update: function (dummy_data) {
                                          this.set(dummy_data)
                                          this.send(this)
                                      },
                                      set: function (dummy_data) {
                                          this.payload.dummy_data = dummy_data
                                      },
                                      send: function () { platformInterface.send(this) }
                                  })

        // @command vcc_en
        // @property enable: string
        property var vcc_en: ({
                                  "cmd": "vcc_en",
                                  "payload": {
                                      "enable": ""
                                  },
                                  update: function (enable) {
                                      this.set(enable)
                                      this.send(this)
                                  },
                                  set: function (enable) {
                                      this.payload.enable = enable
                                  },
                                  send: function () { platformInterface.send(this) }
                              })

        // @command reset_position
        property var reset_position: ({
                                          "cmd": "reset_position",
                                          update: function () {
                                              this.send(this)
                                          },
                                          send: function () { platformInterface.send(this) }
                                      })

        // @command reset_turns
        property var reset_turns: ({
                                       "cmd": "reset_turns",
                                       update: function () {
                                           this.send(this)
                                       },
                                       send: function () { platformInterface.send(this) }
                                   })

        // @command reset_errors
        property var reset_errors: ({
                                        "cmd": "reset_errors",
                                        update: function () {
                                            this.send(this)
                                        },
                                        send: function () { platformInterface.send(this) }
                                    })

        // @command set_low_batt
        // @property battv_threshold: double
        property var set_low_batt: ({
                                        "cmd": "set_low_batt",
                                        "payload": {
                                            "battv_threshold": 0.0
                                        },
                                        update: function (battv_threshold) {
                                            this.set(battv_threshold)
                                            this.send(this)
                                        },
                                        set: function (battv_threshold) {
                                            this.payload.battv_threshold = battv_threshold
                                        },
                                        send: function () { platformInterface.send(this) }
                                    })

        // @command set_over_temp
        // @property temp_threshold: double
        property var set_over_temp: ({
                                         "cmd": "set_over_temp",
                                         "payload": {
                                             "temp_threshold": 0.0
                                         },
                                         update: function (temp_threshold) {
                                             this.set(temp_threshold)
                                             this.send(this)
                                         },
                                         set: function (temp_threshold) {
                                             this.payload.temp_threshold = temp_threshold
                                         },
                                         send: function () { platformInterface.send(this) }
                                     })

        // @command get_alarmbattv
        property var get_alarmbattv: ({
                                          "cmd": "get_alarmbattv",
                                          update: function () {
                                              this.send(this)
                                          },
                                          send: function () { platformInterface.send(this) }
                                      })


        // @command set_battv
        // @property battv: double
        property var set_battv: ({
                                     "cmd": "set_battv",
                                     "payload": {
                                         "battv": 0.0
                                     },
                                     update: function (battv) {
                                         this.set(battv)
                                         this.send(this)
                                     },
                                     set: function (battv) {
                                         this.payload.battv = battv
                                     },
                                     send: function () { platformInterface.send(this) }
                                 })
        // @command get_temperature
        property var get_temperature: ({
                                           "cmd": "get_temperature",
                                           update: function () {
                                               this.send(this)
                                           },
                                           send: function () { platformInterface.send(this) }
                                       })


        // @command get_errors
        property var get_errors: ({
                                      "cmd": "get_errors",
                                      update: function () {
                                          this.send(this)
                                      },
                                      send: function () { platformInterface.send(this) }
                                  })
        // @command get_lowbattv
        property var get_lowbattv: ({
                                        "cmd": "get_lowbattv",
                                        update: function () {
                                            this.send(this)
                                        },
                                        send: function () { platformInterface.send(this) }
                                    })

        property var get_maxtemp: ({
                                       "cmd": "get_maxtemp",
                                       update: function () {
                                           this.send(this)
                                       },
                                       send: function () { platformInterface.send(this) }
                                   })

        property var get_firmware_version: ({
                                                "cmd": "get_firmware_version",
                                                update: function () {
                                                    this.send(this)
                                                },
                                                send: function () { platformInterface.send(this) }
                                            })
        // @command get_battv
        property var get_battv_value: ({
                                           "cmd": "get_battv",
                                           update: function () {
                                               this.send(this)
                                           },
                                           send: function () { platformInterface.send(this) }
                                       })
        // @command status_telemetry
        property var status_telemetry: ({
                                            "cmd": "status_telemetry",
                                            update: function () {
                                                this.send(this)
                                            },
                                            send: function () { platformInterface.send(this) }
                                        })



    }
}
